[google]
# Production sheet
# sheet_id = "https://docs.google.com/spreadsheets/d/1DdZmbo3tvtrb8fNfgTdgmOpjX-XoKhTcQa1hQLlffPE/edit#gid=1798594710"
# Testing sheet
sheet_id = "https://docs.google.com/spreadsheets/d/1K6gLATrgUSZFXgec5u5qP--4tH74QKSmjnoVjq5VqFk/edit?gid=769220148#gid=769220148"
input_range_name = "Output"
output_range_name = "Output"

[genetic_algorithm]
# The number of generations to run the algorithm; trials
generations = 1_000_000_000_000

# The number of no improvments generations before culling the population
max_no_improvement_generations = 200

# The number of solutions to try in each generation
# The higher the number, the more likely the algorithm will find the best solution,
# but the longer it will take to run
pop_size = 1000

# The probability of a gene being mutated by the mutation scheme chosen
# Most numbers between 0.01 and 0.1 are reasonable; else, the muation rate is too high or too low
# and the algorithm will not converge to a good solution
mutation_rate = 0.01

# The mean and standard deviation of the Gaussian distribution used to mutate the genes
mutation_mean = 0
mutation_std = 0.1

# The lower and upper bounds of the genes in the chromosome
mutation_lower_bound = 0
mutation_upper_bound = 1

# The function used to mutate the children's chromosomes
# This can be: "standard", "gaussian", "bit_flip", "uniform"
mutation_method = "gaussian"

# The number of solutions to interleave and mate to form a child
num_parents = 2

# Elitism: the number of best solutions to keep from the previous generation
num_elites = 20

# The function used to cull the population
# This can be: "best_mutants", "best_mutants_random", "random"
culling_method = "best_mutants_random"

# The maximum percentage of the population to cull if no improvement is made in the last no_improvement_counter generations
max_culling_percent = 0.1
# The minimum percentage of the population to cull if no improvement is made in the last no_improvement_counter generations
min_culling_percent = 0.1
# The amount at which to adjust the culling percentage
culling_percent_increment = 1.1
# Either increase or decrease the culling percentage
# This can be: "forward", "reverse"
culling_direction = "forward"

# The function used to select the parents for mating
# This can be: "rank", "tournament", "roulette"
selection_method = "tournament"
# The tournament size for the tournament selection method
tournament_size = 20

# The function used to interleave the parents' chromosomes to form the children's chromosomes
# This can be: "k_point_crossover", "uniform_crossover"
mating_method = "k_point_crossover"
# The k in k-point crossover:
# The number of points at which the given parents' chromosomes are split and then
# interleaved to form the children's chromosomes
k = 3

# The number of CPUs to use to run the algorithm
# num_cpus = 4

max_bucket_size = 20

balance_weight = 1.0

size_penalty_weight = 3.0
